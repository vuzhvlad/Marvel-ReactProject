{"ast":null,"code":"var _jsxFileName = \"/Users/vuzhvlad/Desktop/devStudy/React/project1 marvel Hooks/marvel/src/components/comicsList/ComicsList.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/PicSpinner';\nimport ErrorMessage from '../errorMessage/ErrorMsg';\nimport './comicsList.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ComicsList = () => {\n  _s();\n  //all states\n  const [comicsList, setComicsList] = useState([]); // list\n  const [newItemLoading, setnewItemLoading] = useState(false); // if we load anything new\n  const [offset, setOffset] = useState(0); // offset\n  const [comicsEnded, setComicsEnded] = useState(false); // if it is ended\n\n  const {\n    loading,\n    error,\n    getAllComics\n  } = useMarvelService(); // getting states and method from our custom hook\n\n  useEffect(() => {\n    // mounting for the first time\n    onRequest(offset, true);\n  }, []);\n  const onRequest = (offset, initial) => {\n    // function for reqesting our comics\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllComics(offset).then(onComicsListLoaded);\n  };\n  const onComicsListLoaded = newComicsList => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      // if it is ended\n      ended = true;\n    }\n    setComicsList([...comicsList, ...newComicsList]);\n    setnewItemLoading(false);\n    setOffset(offset + 8);\n    setComicsEnded(ended);\n  };\n  function renderItems(arr) {\n    // function for rendering all the items on the page\n    const comics = arr.map((item, i) => {\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"comics__item\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"#\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: item.thumbnail,\n            alt: item.title,\n            className: \"comics__item-img\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comics__item-name\",\n            children: item.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"comics__item-price\",\n            children: item.price\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this);\n    });\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comics__grid\",\n      children: comics\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this);\n  }\n  const comics = renderItems(comicsList); // putting all comics into var\n\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 34\n  }, this) : null; // if error is true\n  const spinner = loading && !newItemLoading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 50\n  }, this) : null; // if loading is true and newiteloading is false\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comics__list\",\n    children: [errorMessage, spinner, comics, /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: newItemLoading,\n      style: {\n        'display': comicsEnded ? 'none' : 'block'\n      },\n      className: \"button button__main button__long\",\n      onClick: () => onRequest(offset),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"inner\",\n        children: \"load more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(ComicsList, \"FBstaSN0C4EkuR+GHghgFsMYtW4=\", false, function () {\n  return [useMarvelService];\n});\n_c = ComicsList;\nexport default ComicsList;\nvar _c;\n$RefreshReg$(_c, \"ComicsList\");","map":{"version":3,"names":["useState","useEffect","useMarvelService","Spinner","ErrorMessage","jsxDEV","_jsxDEV","ComicsList","_s","comicsList","setComicsList","newItemLoading","setnewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","loading","error","getAllComics","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","renderItems","arr","comics","map","item","i","className","children","href","src","thumbnail","alt","title","fileName","_jsxFileName","lineNumber","columnNumber","price","errorMessage","spinner","disabled","style","onClick","_c","$RefreshReg$"],"sources":["/Users/vuzhvlad/Desktop/devStudy/React/project1 marvel Hooks/marvel/src/components/comicsList/ComicsList.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/PicSpinner';\nimport ErrorMessage from '../errorMessage/ErrorMsg';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    //all states\n    const [comicsList, setComicsList] = useState([]); // list\n    const [newItemLoading, setnewItemLoading] = useState(false); // if we load anything new\n    const [offset, setOffset] = useState(0); // offset\n    const [comicsEnded, setComicsEnded] = useState(false); // if it is ended\n\n    const {loading, error, getAllComics} = useMarvelService(); // getting states and method from our custom hook\n\n    useEffect(() => { // mounting for the first time\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => { // function for reqesting our comics\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n\n        getAllComics(offset)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (newComicsList) => {\n\n        let ended = false;\n        if (newComicsList.length < 8) { // if it is ended\n            ended = true;\n        }\n\n        setComicsList([...comicsList, ...newComicsList]);\n        setnewItemLoading(false);\n        setOffset(offset + 8);\n        setComicsEnded(ended);\n    }\n\n    function renderItems (arr) { // function for rendering all the items on the page\n        const comics = arr.map((item, i) => {\n            return (\n                <li className=\"comics__item\" key={i}>\n                    <a href=\"#\">\n                        <img src={item.thumbnail} alt={item.title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{item.title}</div>\n                        <div className=\"comics__item-price\">{item.price}</div>\n                    </a>\n                </li>\n            )\n        })\n\n        return (\n            <ul className=\"comics__grid\">\n                {comics}\n            </ul>\n        )\n    }\n\n    const comics = renderItems(comicsList); // putting all comics into var\n\n    const errorMessage = error ? <ErrorMessage/> : null; // if error is true\n    const spinner = loading && !newItemLoading ? <Spinner/> : null; // if loading is true and newiteloading is false\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {comics}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : comicsEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}