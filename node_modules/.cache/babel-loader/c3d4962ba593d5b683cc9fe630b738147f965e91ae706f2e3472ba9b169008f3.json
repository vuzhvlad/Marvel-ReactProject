{"ast":null,"code":"var _jsxFileName = \"/Users/vuzhvlad/Desktop/devStudy/React/project1 marvel Hooks/marvel/src/components/randomChar/RandomChar.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport Spinner from '../spinner/PicSpinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMsg';\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RandomChar = () => {\n  _s();\n  // all states\n  const [char, setChar] = useState({});\n  const {\n    loading,\n    error,\n    getCharacter,\n    clearError\n  } = useMarvelService(); // service for getting characters, our custom hook, with all states and methods\n\n  useEffect(() => {\n    // after page renders mounting\n    updateChar();\n    const timerId = setInterval(updateChar, 10000);\n    return () => {\n      // component will unmount\n      clearInterval(timerId);\n    };\n  }, []);\n  const onCharLoaded = char => {\n    // when char  is loaded\n    setChar(char);\n  };\n  const updateChar = () => {\n    // updating char\n    clearError(); // every time we request for new character it cleans our error\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // rnadomizer\n\n    getCharacter(id) // getting character by id\n    .then(onCharLoaded); // the arg that we get from promise will autmatically be a parametr for our funct inside of .then\n  };\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 34\n  }, this) : null; // boolean or null\n  const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 31\n  }, this) : null; // boolean or null\n  const content = !(loading || error) ? /*#__PURE__*/_jsxDEV(View, {\n    char: char\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 43\n  }, this) : null; // if we dont have loading or error then we show content\n  // ternar for showing what is happening on the page depedingon state, if it is a null it wont be shown on the page\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"randomchar\",\n    children: [errorMessage, spinner, content, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"randomchar__static\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"randomchar__title\",\n        children: [\"Random character for today!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 52\n        }, this), \"Do you want to get to know him better?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"randomchar__title\",\n        children: \"Or choose another ones\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button button__main\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          onClick: updateChar,\n          className: \"inner\",\n          children: \"try it\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: mjolnir,\n        alt: \"mjolnir\",\n        className: \"randomchar__decoration\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(RandomChar, \"mDOPi2qiS+6Dmy6+yzGQ9llKXvI=\", false, function () {\n  return [useMarvelService];\n});\n_c = RandomChar;\nconst View = ({\n  char\n}) => {\n  // function where we just have no logical data with characters\n  const {\n    name,\n    description,\n    thumbnail,\n    homepage,\n    wiki\n  } = char; // jsut getting data from prop\n\n  let styleImg = {\n    objectFit: \"cover\"\n  };\n  if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n    // if it is character without image we use this one\n    styleImg = {\n      \"objectFit\": \"contain\"\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"randomchar__block\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      style: styleImg,\n      src: thumbnail,\n      alt: \"Random character\",\n      className: \"randomchar__img\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"randomchar__info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"randomchar__name\",\n        children: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"randomchar__descr\",\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"randomchar__btns\",\n        children: [/*#__PURE__*/_jsxDEV(\"a\", {\n          href: homepage,\n          className: \"button button__main\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: \"homepage\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: wiki,\n          className: \"button button__secondary\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"inner\",\n            children: \"Wiki\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n_c2 = View;\nexport default RandomChar;\nvar _c, _c2;\n$RefreshReg$(_c, \"RandomChar\");\n$RefreshReg$(_c2, \"View\");","map":{"version":3,"names":["useState","useEffect","Spinner","useMarvelService","ErrorMessage","mjolnir","jsxDEV","_jsxDEV","RandomChar","_s","char","setChar","loading","error","getCharacter","clearError","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","fileName","_jsxFileName","lineNumber","columnNumber","spinner","content","View","className","children","onClick","src","alt","_c","name","description","thumbnail","homepage","wiki","styleImg","objectFit","style","href","_c2","$RefreshReg$"],"sources":["/Users/vuzhvlad/Desktop/devStudy/React/project1 marvel Hooks/marvel/src/components/randomChar/RandomChar.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport Spinner from '../spinner/PicSpinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMsg';\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    // all states\n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService(); // service for getting characters, our custom hook, with all states and methods\n\n    useEffect(() => { // after page renders mounting\n        updateChar();\n\n        const timerId = setInterval(updateChar, 10000);\n\n        return () => { // component will unmount\n            clearInterval(timerId)\n        }\n\n    }, []);\n\n    const onCharLoaded = (char) => { // when char  is loaded\n        setChar(char);\n    }\n\n    const updateChar = () => {  // updating char\n        clearError(); // every time we request for new character it cleans our error\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000); // rnadomizer\n \n        getCharacter(id) // getting character by id\n        .then(onCharLoaded) // the arg that we get from promise will autmatically be a parametr for our funct inside of .then\n    }\n\n    const errorMessage = error ? <ErrorMessage/> : null; // boolean or null\n    const spinner = loading ? <Spinner/> : null; // boolean or null\n    const content = !(loading || error) ? <View char={char}/> : null; // if we dont have loading or error then we show content\n    // ternar for showing what is happening on the page depedingon state, if it is a null it wont be shown on the page\n\n    return (\n        <div className=\"randomchar\">\n                {errorMessage}\n                {spinner}\n                {content}\n                <div className=\"randomchar__static\">\n                    <p className=\"randomchar__title\">\n                        Random character for today!<br/>\n                        Do you want to get to know him better?\n                    </p>\n                    <p className=\"randomchar__title\">\n                        Or choose another ones\n                    </p>\n                    <button className=\"button button__main\">\n                        <div onClick={updateChar} className=\"inner\">try it</div>\n                    </button>\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n                </div>\n            </div>\n    )\n}\n\nconst View = ({char}) => { // function where we just have no logical data with characters\n    const {name, description, thumbnail, homepage, wiki} = char; // jsut getting data from prop\n\n    let styleImg= { objectFit: \"cover\" };\n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') { // if it is character without image we use this one\n        styleImg = { \"objectFit\" : \"contain\" };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img style={styleImg} src={thumbnail} alt=\"Random character\" className=\"randomchar__img\"/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                        </div>\n                    </div>\n                </div>\n    )\n}\n\nexport default RandomChar;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}