{"ast":null,"code":"var _jsxFileName = \"/Users/vuzhvlad/Desktop/devStudy/React/project1 marvel Hooks/marvel/src/components/charInfo/CharInfo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\nimport Spinner from '../spinner/PicSpinner';\nimport ErrorMessage from '../errorMessage/ErrorMsg';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\nimport './charInfo.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CharInfo = props => {\n  _s();\n  const [char, setChar] = useState(null);\n  const {\n    loading,\n    error,\n    getCharacter,\n    clearError\n  } = useMarvelService(); // service for getting characters\n\n  useEffect(() => {\n    // compponent will change depeding on charId\n    updateChar();\n  }, [props.charId]);\n  const updateChar = () => {\n    // for updating \n    const {\n      charId\n    } = props; // destrucitirsation of id from props\n\n    if (!charId) {\n      // in case we dont have it\n      return;\n    }\n    clearError(); // to clean error if something goes wrong\n\n    getCharacter(charId) // then we get character by id\n    .then(onCharLoaded); // and load this character and changing state\n  };\n  const onCharLoaded = char => {\n    setChar(char);\n  };\n  const skeleton = char || loading || error ? null : /*#__PURE__*/_jsxDEV(Skeleton, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 56\n  }, this); // if any of these true we dont put anything if they are false we use skeleton\n  const errorMessage = error ? /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 34\n  }, this) : null; // boolean or null\n  const spinner = loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 31\n  }, this) : null; // boolean or null\n  const content = !(loading || error || !char) ? /*#__PURE__*/_jsxDEV(View, {\n    char: char\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 52\n  }, this) : null; // if we dont have loading or error or char then we show content\n  // ternar for showing what is happening on the page depedingon state, if it is a null it wont be shown on the page\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"char__info\",\n    children: [skeleton, errorMessage, spinner, content]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(CharInfo, \"fo4yMk3gnyKtV8rawMz5WHoIZlA=\", false, function () {\n  return [useMarvelService];\n});\n_c = CharInfo;\nconst View = ({\n  char\n}) => {\n  // non logical part\n  const {\n    name,\n    description,\n    thumbnail,\n    homepage,\n    wiki,\n    comics\n  } = char;\n  let styleImg = {\n    objectFit: \"cover\"\n  };\n  if (thumbnail.indexOf('image_not_available') > -1) {\n    // if it is character without image we use this one\n    styleImg = {\n      objectFit: \"contain\"\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__basics\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        style: styleImg,\n        src: thumbnail,\n        alt: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__info-name\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"char__btns\",\n          children: [/*#__PURE__*/_jsxDEV(\"a\", {\n            href: homepage,\n            className: \"button button__main\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: \"homepage\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            href: wiki,\n            className: \"button button__secondary\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"inner\",\n              children: \"Wiki\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__descr\",\n      children: description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"char__comics\",\n      children: \"Comics:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"char__comics-list\",\n      children: [comics.length > 0 ? null : 'There is no comics for this character', comics.map((item, i) => {\n        // creating map for getting all comics for character\n        if (i > 9) return; // if it is more than 10 comics we just stop\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"char__comics-item\",\n          children: item.name\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 33\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true);\n};\n_c2 = View;\nCharInfo.propTypes = {\n  // checking the type of prop\n  charId: PropTypes.string\n};\nexport default CharInfo;\nvar _c, _c2;\n$RefreshReg$(_c, \"CharInfo\");\n$RefreshReg$(_c2, \"View\");","map":{"version":3,"names":["useState","useEffect","PropTypes","Spinner","ErrorMessage","Skeleton","useMarvelService","jsxDEV","_jsxDEV","Fragment","_Fragment","CharInfo","props","_s","char","setChar","loading","error","getCharacter","clearError","updateChar","charId","then","onCharLoaded","skeleton","fileName","_jsxFileName","lineNumber","columnNumber","errorMessage","spinner","content","View","className","children","_c","name","description","thumbnail","homepage","wiki","comics","styleImg","objectFit","indexOf","style","src","alt","href","length","map","item","i","_c2","propTypes","string","$RefreshReg$"],"sources":["/Users/vuzhvlad/Desktop/devStudy/React/project1 marvel Hooks/marvel/src/components/charInfo/CharInfo.js"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport { PropTypes } from 'prop-types';\nimport Spinner from '../spinner/PicSpinner';\nimport ErrorMessage from '../errorMessage/ErrorMsg';\nimport Skeleton from '../skeleton/Skeleton';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\n\n\n\nconst CharInfo = (props) => {    \n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService(); // service for getting characters\n\n    useEffect(() => { // compponent will change depeding on charId\n        updateChar();\n    }, [props.charId]);\n\n    const updateChar = () => { // for updating \n        const {charId} = props; // destrucitirsation of id from props\n\n        if(!charId) { // in case we dont have it\n            return;\n        }   \n            clearError(); // to clean error if something goes wrong\n            \n            getCharacter(charId) // then we get character by id\n            .then(onCharLoaded) // and load this character and changing state\n    }\n\n    const onCharLoaded = (char) => { \n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton/>; // if any of these true we dont put anything if they are false we use skeleton\n    const errorMessage = error ? <ErrorMessage/> : null; // boolean or null\n    const spinner = loading ? <Spinner/> : null; // boolean or null\n    const content = !(loading || error || !char) ? <View char={char}/> : null; // if we dont have loading or error or char then we show content\n    // ternar for showing what is happening on the page depedingon state, if it is a null it wont be shown on the page\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\nconst View = ({char}) => { // non logical part\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let styleImg= { objectFit: \"cover\" };\n    if(thumbnail.indexOf('image_not_available') > -1) { // if it is character without image we use this one\n        styleImg = { objectFit : \"contain\" };\n    }\n\n    return (\n        <>\n        <div className=\"char__basics\">\n                    <img style={styleImg} src={thumbnail} alt={name}/>\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">Wiki</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                     {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics for this character'}\n                    \n                    {\n                        comics.map((item, i) => { // creating map for getting all comics for character\n                            if(i > 9) return; // if it is more than 10 comics we just stop\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = { // checking the type of prop\n    charId: PropTypes.string\n}\n\nexport default CharInfo;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}